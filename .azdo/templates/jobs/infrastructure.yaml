parameters:
    environment: ''

jobs:
  - job: Terraform_Deployment
    pool:
      vmImage: 'windows-latest'
    variables:
      - template: /.azdo/variables/common.yaml
      - template: /.azdo/variables/${{ parameters.environment }}.yaml
    steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        inputs:
          terraformVersion: '${{ variables.TF_VER }}'
        displayName: 'Install Terraform 0.12.3'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(Build.SourcesDirectory)/deploy/terraform
          backendServiceArm: '${{ variables.AZURE_SERVICE_CONNECTION_NAME }}'
          backendAzureRmResourceGroupName: '${{ variables.TF_STATE_RESOURCE_GROUP_NAME }}'
          backendAzureRmStorageAccountName: '${{ variables.TF_STATE_STORAGE_ACCOUNT_NAME }}'
          backendAzureRmContainerName: '${{ variables.TF_STATE_STORAGE_CONTAINER_NAME }}'
          backendAzureRmKey: '${{ variables.TF_STATE_KEY_NAME }}'
        
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        inputs:
          command: 'plan'
          workingDirectory: $(Build.SourcesDirectory)/deploy/terraform
          providerAzureConnectedServiceName: '${{ variables.AZURE_SERVICE_CONNECTION_NAME }}'
          args: -var=environment=demo -out=tfplan.out
        displayName: Terraform Plan

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        inputs:
          command: 'apply'
          workingDirectory: $(Build.SourcesDirectory)/deploy/terraform
          providerAzureConnectedServiceName: '${{ variables.AZURE_SERVICE_CONNECTION_NAME }}'
          args: tfplan.out
        displayName: Terraform Apply